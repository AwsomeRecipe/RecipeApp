{"version":3,"sources":["components/List.js","App.js","reportWebVitals.js","index.js"],"names":["List","props","state","clear","show","name","ingredients","eventKey","array","id","reset","disable","handleDeleteAll","bind","handleReset","handleShow","handleClose","handleNameChange","handleIngredientsChange","handleSubmit","afterSubmit","deleteRecipe","this","setState","i","document","getElementById","remove","event","target","value","key","split","preventDefault","ingredientsList","map","x","newId","push","Card","bg","Header","Accordion","Toggle","as","Button","variant","size","style","color","fontSize","Collapse","Body","background","textAlign","onClick","Recipe","width","className","addRecipe","marginTop","Modal","onHide","animation","closeButton","Title","onSubmit","onChange","placeholder","Footer","type","disabled","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.27b34604.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n//importing needed components from react-bootstrap.................................\r\nimport Accordion from 'react-bootstrap/Accordion'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Modal from 'react-bootstrap/Modal'\r\n\r\nclass List extends React.Component{\r\n    \r\n\r\n    constructor(props) {\r\n        super(props);\r\n        //setting the state object of the app, it has nine keys as follow:..\r\n        // (clear) for the button clear which is set by default to false, and when it's set to true, all recipes are deleted\r\n        // (show) for the modal, to controll the pop up form, setted to false by default\r\n        // (name) for the name of the recipe, each recipe has name based on the first input from user, which get updated on every submit action\r\n        // (ingredients) same as name, but for the ingredients of the recipe\r\n        // (eventKey) there is an event key value for each accordion.toggle and collaps, this value gets higher by one each time a new recipe is added\r\n        // (array) this array conains the elements to be renderd representing the recipes added by the user, this array gets updated on each new addition\r\n        // (id) a unique id for each new added recipe\r\n        // (reset) to controll the rendered UI and resets the original structure of the app\r\n        // (disable) controlls when the clear butto to be disabled\r\n        this.state = {\r\n            clear: false,\r\n            show:false,\r\n            name: \"\",\r\n            ingredients: \"\",\r\n            eventKey:3,\r\n            array:[],\r\n            id:\"\",\r\n            reset:true,\r\n            disable:true\r\n        };\r\n\r\n        this.handleDeleteAll = this.handleDeleteAll.bind(this);\r\n        this.handleReset = this.handleReset.bind(this);\r\n\r\n        this.handleShow = this.handleShow.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n        this.handleIngredientsChange = this.handleIngredientsChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.afterSubmit = this.afterSubmit.bind(this);\r\n        this.deleteRecipe = this.deleteRecipe.bind(this);\r\n\r\n  \r\n      }      \r\n      \r\n        // the method that is added onclick to the clear button to delete all the recipe\r\n        handleDeleteAll(){\r\n            this.setState({clear:true,\r\n                            array:[],\r\n                            disable:true,\r\n                            id:\"\"\r\n                            });\r\n        }\r\n        // A method that takes a parameter that represents the id of the recipe, track that element and remove it from DOM\r\n        deleteRecipe(i){\r\n            let recipe = document.getElementById(i)\r\n            recipe.remove()\r\n        }\r\n        // A method that resets the state object to the initial state\r\n        handleReset(){\r\n            this.setState(\r\n                {reset:true,\r\n                clear:false,\r\n                array:[],\r\n                disable:true,\r\n                name: \"\",\r\n                ingredients: \"\",  \r\n                id:\"\", \r\n                }\r\n                )\r\n        }\r\n        // A method which changes the show attr for the modal to true, so the pop up form pops up\r\n        handleShow(){\r\n            this.setState({show:true})\r\n        }\r\n        // A method which changes the show attr for the modal to false, so the pop up form disapear\r\n        handleClose(){\r\n            this.setState({show:false})\r\n        }\r\n        // A method that track the value of the user input for name of the recipe, and sets the name key of the state object to that value\r\n        handleNameChange(event) {\r\n            let name = event.target.value\r\n            this.setState({\r\n            name: name,\r\n            });\r\n        }\r\n        // Same as handleNameChange but for the ingredients\r\n        handleIngredientsChange(event) {\r\n            let ingredients = event.target.value\r\n            this.setState({\r\n            ingredients:ingredients\r\n            });\r\n        }\r\n        // This method get invoked on submit of the form, it gets the currunt value of the name and ingredients inputs..\r\n        //  and passes them to the afterSubmit method as parameters, then invokes the afterSubmit method..\r\n        // it also sets show to false, and sets an event-key for the new recipe of the previous one plus one\r\n        // returns the name and ingredients values to empty strings once again\r\n        handleSubmit(event) {\r\n            let key=this.state.eventKey+1\r\n            let name=this.state.name\r\n            // converting the user provided string into an array before passing it to this.afterSubmit\r\n            let ingredients = this.state.ingredients.split(',')\r\n            this.setState({\r\n            show:false,\r\n            eventKey:key,\r\n            disable:false,\r\n            name: \"\",\r\n            ingredients: \"\",   \r\n            })\r\n            this.afterSubmit(name, ingredients);\r\n            event.preventDefault();\r\n        }\r\n\r\n        // This method takes the value of ingredients and name from the handleSubmit method as two parameters..\r\n        // then pushes elements to the array of the state based on these values\r\n        afterSubmit(name,ingredients){\r\n            //mapping over the ingredients array and returning a li tag for each ingredient\r\n            let ingredientsList = ingredients.map(x=><li>{x}</li>)\r\n            // creating a new id for the new recipe\r\n            let newId = this.state.id + \"a\"\r\n            //updating the id in the state object\r\n            this.setState({id:newId})\r\n            this.state.array.push(\r\n                //this division is to prevent the recatDom exception error\r\n                <div>\r\n                    <div id={newId}>  \r\n                        <Card bg=\"secondary\">\r\n                            <Card.Header>\r\n                                <Accordion.Toggle as={Button} variant=\"link\" eventKey={`${this.state.eventKey}`} size=\"lg\" style={{color:\"white\",fontSize:\"2.2vw\"}}>\r\n                                    {name}\r\n                                </Accordion.Toggle>\r\n                            </Card.Header>\r\n                            <Accordion.Collapse eventKey={`${this.state.eventKey}`}>\r\n                                <Card.Body style={{color:\"black\",background:\"#f5f5f5\",fontSize:\"1.5vw\",textAlign:\"left\"}}>\r\n                                    <ul>{ingredientsList}</ul>\r\n                                    <Button variant=\"danger\" size=\"sm\" onClick={()=>this.deleteRecipe(newId)}>Delete</Button>\r\n                                </Card.Body>\r\n                            </Accordion.Collapse>\r\n                        </Card>\r\n                    </div>\r\n                </div>\r\n            );\r\n            }\r\n        // This method mappes over the array which is passed as parameter represents the array of of the state object and returns each element\r\n        addRecipe(array){\r\n            return array.map((Recipe)=>Recipe)\r\n        }     \r\n       \r\n    render(){\r\n        \r\n        if(this.state.clear==false && this.state.reset==true) {\r\n        return(\r\n        <div style={{width:\"60vw\"}} className=\"d-flex flex-column justify-content-center\">\r\n            <Accordion>\r\n                <div>\r\n                    <Card bg=\"secondary\" id=\"firstRecipe\">\r\n                        <Card.Header>\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\" size=\"lg\" style={{color:\"white\",fontSize:\"2.2vw\"}}>\r\n                                Basic Vanilla Cake\r\n                            </Accordion.Toggle>\r\n                        </Card.Header>\r\n                        <Accordion.Collapse eventKey=\"0\">\r\n                            <Card.Body style={{color:\"black\",background:\"#f5f5f5\",fontSize:\"1.5vw\",textAlign:\"left\"}}>\r\n                                <ul>\r\n                                    <li>2 sticks unsalted butter, at room temperature, plus more for the pans</li>\r\n                                    <li>3 cups all-purpose flour, plus more for the pans</li>\r\n                                    <li>1 tablespoon baking powder</li>\r\n                                    <li>1/2 teaspoon salt</li>\r\n                                    <li>1 1/4 cups sugar</li>\r\n                                    <li>4 large eggs, at room temperature</li>\r\n                                    <li>1 tablespoon vanilla extract</li>\r\n                                    <li>1 1/4 cups whole milk (or 3/4 cup heavy cream mixed with 1/2 cup water)</li>\r\n                                </ul>\r\n                                <Button variant=\"danger\" size=\"sm\" onClick={()=>this.deleteRecipe(\"firstRecipe\")}>Delete</Button>\r\n                            </Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card>\r\n                </div>\r\n                <div>\r\n                    <Card bg=\"secondary\" id=\"secRecipe\">\r\n                        <Card.Header>\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\" size=\"lg\" style={{color:\"white\",fontSize:\"2.2vw\"}}>\r\n                                Pizza Dough\r\n                            </Accordion.Toggle>\r\n                        </Card.Header>\r\n                        <Accordion.Collapse eventKey=\"1\">\r\n                            <Card.Body style={{color:\"black\",background:\"#f5f5f5\",fontSize:\"1.5vw\",textAlign:\"left\"}}>\r\n                                <ul>\r\n                                    <li>1 1/2 cups (355 ml) warm water (105°F-115°F)</li>\r\n                                    <li>1 package (2 1/4 teaspoons) active dry yeast</li>\r\n                                    <li>3 3/4 cups (490 g) bread flour</li>\r\n                                    <li>2 tablespoons extra virgin olive oil (omit if cooking pizza in a wood-fired pizza oven)</li>\r\n                                    <li>2 teaspoons salt</li>\r\n                                    <li>1 teaspoon sugar</li>\r\n                                </ul>    \r\n                                <Button variant=\"danger\" size=\"sm\" onClick={()=>this.deleteRecipe(\"secRecipe\")}>Delete</Button>                \r\n                            </Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card>\r\n                </div>\r\n                <div>\r\n                    <Card bg=\"secondary\" id=\"thirdRecipe\">\r\n                        <Card.Header>\r\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"2\" size=\"lg\" style={{color:\"white\",fontSize:\"2.2vw\"}}>\r\n                                Basic pasta recipe               \r\n                            </Accordion.Toggle>\r\n                        </Card.Header>\r\n                        <Accordion.Collapse eventKey=\"2\">\r\n                            <Card.Body style={{color:\"black\",background:\"#f5f5f5\",fontSize:\"1.5vw\",textAlign:\"left\"}}>\r\n                                <ul>\r\n                                    <li>1 egg, beaten</li>\r\n                                    <li>½ teaspoon salt</li>\r\n                                    <li>1 cup all-purpose flour</li>\r\n                                    <li>2 tablespoons water</li>\r\n                                </ul>\r\n                                <Button variant=\"danger\" size=\"sm\" onClick={()=>this.deleteRecipe(\"thirdRecipe\")}>Delete</Button>                    \r\n                            </Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card>\r\n                </div>\r\n                {/*this is how the user added recipes are rendered, by passing the array to the addRecipe method */}\r\n                {\r\n                    this.addRecipe(this.state.array)\r\n                }\r\n            </Accordion>\r\n            <div style={{marginTop:\"1vw\"}} className=\"d-flex flex-row justify-content-around\">\r\n                <Button variant=\"danger\" size=\"lg\" onClick={this.handleDeleteAll} >Clear</Button>\r\n                <Button variant=\"light\" size=\"lg\" onClick={this.handleReset}>Reset</Button>  \r\n                <Button variant=\"primary\" size=\"lg\" onClick={this.handleShow}>\r\n                    Add \r\n                </Button>\r\n            </div>\r\n\r\n            <Modal show={this.state.show} onHide={this.handleClose} animation={false}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Add a new Recipe</Modal.Title>\r\n                </Modal.Header>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <Modal.Body className=\"d-flex flex-column justify-content-center\">\r\n                        <label>Recipe name</label>\r\n                        <input value={this.state.name} onChange={this.handleNameChange} placeholder=\"Enter a name for the Recipe\"></input>\r\n                        <label>Ingerdients</label>\r\n                        <textarea value={this.state.ingredients} onChange={this.handleIngredientsChange} placeholder=\"separate ingredients with comma!\"></textarea>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            Add\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </form>\r\n            </Modal>\r\n        </div>\r\n        )\r\n      }else{\r\n          return(\r\n            <div style={{width:\"60vw\"}} className=\"d-flex flex-column justify-content-center\">\r\n                <Accordion>\r\n                    <div>\r\n                        {this.addRecipe(this.state.array)}\r\n                    </div>\r\n                </Accordion>\r\n                <div style={{marginTop:\"1vw\"}} className=\"d-flex flex-row justify-content-around\">    \r\n                    <Button variant=\"danger\" size=\"lg\" onClick={this.handleDeleteAll} disabled={this.state.disable}>Clear</Button>\r\n                    <Button variant=\"light\" size=\"lg\" onClick={this.handleReset} >Reset</Button>  \r\n                    <Button variant=\"primary\" size=\"lg\" onClick={this.handleShow} >Add</Button>\r\n                </div>\r\n                <Modal show={this.state.show} onHide={this.handleClose} animation={false}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add a new Recipe</Modal.Title>\r\n                    </Modal.Header>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <Modal.Body className=\"d-flex flex-column justify-content-center\">\r\n                            <label>Recipe name</label>\r\n                            <input value={this.state.name} onChange={this.handleNameChange} placeholder=\"Enter a name for the Recipe\"></input>\r\n                            <label>Ingerdients</label>\r\n                            <textarea value={this.state.ingredients} onChange={this.handleIngredientsChange} placeholder=\"separate ingredients with comma!\"></textarea>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <Button variant=\"secondary\" onClick={this.handleClose}>\r\n                                Close\r\n                            </Button>\r\n                            <Button variant=\"primary\" type=\"submit\">\r\n                                Add\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </form>\r\n                </Modal>\r\n            </div>\r\n          )\r\n      }\r\n    }\r\n}\r\n        \r\n\r\n\r\nexport default List\r\n","\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport List from './components/List'\n\n//main app rendered component\nfunction App() {\n  return (\n    //styling the container division to be column-directed and flexable with dark bg and centered content \n     <div style={{marginTop:\"5vh\"}} className=\"container-fluid d-flex flex-column align-items-center justify-content-center text-center bg-dark text-white\">\n       <h1>welcom to</h1>\n       <h1>AWESOME RECIPES <i className=\"fas fa-utensils\" style={{fontSize:\"15vh\",color:\"white\"}}></i></h1>\n       <div style={{width:\"60vw\",marginTop:\"1vw\"}}>\n        <List/>\n       </div>\n     </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}